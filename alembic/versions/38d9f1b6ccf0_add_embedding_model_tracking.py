"""Add embedding model tracking

Revision ID: 38d9f1b6ccf0
Revises: a7617f2f2784
Create Date: 2025-08-30 12:28:48.854769

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '38d9f1b6ccf0'
down_revision: Union[str, Sequence[str], None] = 'a7617f2f2784'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Handle feed_health tables
    try:
        op.drop_index(op.f('idx_feed_health_enabled'), table_name='feed_health')
        op.drop_index(op.f('idx_feed_health_score'), table_name='feed_health')  
        op.drop_index(op.f('idx_feed_health_url'), table_name='feed_health')
        op.drop_table('feed_health')
    except:
        pass
    
    try:
        op.drop_index(op.f('idx_feed_health_history_url_time'), table_name='feed_health_history')
        op.drop_table('feed_health_history')
    except:
        pass
    
    # Add model tracking columns with nullable=True first
    op.add_column('article_vectors', sa.Column('model_name', sa.String(length=64), nullable=True))
    op.add_column('article_vectors', sa.Column('model_dimension', sa.Integer(), nullable=True))
    
    # Update existing rows with legacy model info (assume text-embedding-3-small for 1536-dim)
    op.execute("""
        UPDATE article_vectors 
        SET model_name = 'text-embedding-3-small', 
            model_dimension = 1536 
        WHERE model_name IS NULL
    """)
    
    # Now make columns NOT NULL
    op.alter_column('article_vectors', 'model_name', nullable=False)
    op.alter_column('article_vectors', 'model_dimension', nullable=False)
    
    # Drop old indexes
    try:
        op.drop_index(op.f('idx_article_vectors_embedding_hnsw'), table_name='article_vectors')
    except:
        pass
        
    try:
        op.drop_index(op.f('idx_article_vectors_embedding_ivfflat'), table_name='article_vectors')
    except:
        pass
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_index(op.f('idx_article_vectors_embedding_ivfflat'), 'article_vectors', ['embedding'], unique=False, postgresql_ops={'embedding': 'vector_cosine_ops'}, postgresql_with={'lists': '100'}, postgresql_using='ivfflat')
    op.create_index(op.f('idx_article_vectors_embedding_hnsw'), 'article_vectors', ['embedding'], unique=False, postgresql_ops={'embedding': 'vector_cosine_ops'}, postgresql_with={'m': '16', 'ef_construction': '64'}, postgresql_using='hnsw')
    op.drop_column('article_vectors', 'model_dimension')
    op.drop_column('article_vectors', 'model_name')
    op.create_table('feed_health_history',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('feed_url', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('attempt_time', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('success', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('latency_ms', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('error_message', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('articles_fetched', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('feed_health_history_pkey'))
    )
    op.create_index(op.f('idx_feed_health_history_url_time'), 'feed_health_history', ['feed_url', sa.literal_column('attempt_time DESC')], unique=False)
    op.create_table('feed_health',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('feed_url', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('feed_name', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('last_success', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('last_attempt', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('success_count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('error_count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('total_latency_ms', sa.BIGINT(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('avg_latency_ms', sa.DOUBLE_PRECISION(precision=53), server_default=sa.text('0.0'), autoincrement=False, nullable=True),
    sa.Column('health_score', sa.DOUBLE_PRECISION(precision=53), server_default=sa.text('1.0'), autoincrement=False, nullable=True),
    sa.Column('is_enabled', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('error_details', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('feed_health_pkey')),
    sa.UniqueConstraint('feed_url', name=op.f('feed_health_feed_url_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('idx_feed_health_url'), 'feed_health', ['feed_url'], unique=False)
    op.create_index(op.f('idx_feed_health_score'), 'feed_health', [sa.literal_column('health_score DESC')], unique=False)
    op.create_index(op.f('idx_feed_health_enabled'), 'feed_health', ['is_enabled'], unique=False)
    # ### end Alembic commands ###
